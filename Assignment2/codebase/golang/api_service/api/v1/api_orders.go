/*
 * SUSTech Store API
 *
 * API service for SUSTech Store
 *
 * API version: 0.1.0
 * Contact: 12110304@mail.sustech.edu.cn
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1

import (
	"github.com/gin-gonic/gin"
	"net/http"
	"octcarp/sustech/cs328/a2/api/grpc/dbclient"
	"octcarp/sustech/cs328/a2/api/models"
	"octcarp/sustech/cs328/a2/api/utils"
	dbpb "octcarp/sustech/cs328/a2/gogrpc/dbs/pb"
	"strconv"
)

type OrdersAPI struct {
}

// CancelOrder Delete /orders/:id
func (api *OrdersAPI) CancelOrder(c *gin.Context) {
	orderID, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		utils.SendBadRequestErr(c, "Invalid order ID")
		return
	}

	// Check authorization
	_, exists := c.Get("token_user_id")
	if !exists {
		utils.SendUnauthorizedErr(c)
		return
	}

	req := &dbpb.CancelOrderRequest{
		OrderId: int32(orderID),
	}
	res, err := dbclient.GetDbClient().CancelOrder(c.Request.Context(), req)

	if err != nil {
		utils.SendDbErr(c, err.Error())
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": res.Message})
}

// GetOrder Get /orders/:id
func (api *OrdersAPI) GetOrder(c *gin.Context) {
	orderID, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		utils.SendBadRequestErr(c, "Invalid order ID")
		return
	}

	// Check authorization
	_, exists := c.Get("token_user_id")
	if !exists {
		utils.SendUnauthorizedErr(c)
		return
	}

	req := &dbpb.GetOrderRequest{
		OrderId: int32(orderID),
	}
	res, err := dbclient.GetDbClient().GetOrder(c.Request.Context(), req)

	if err != nil {
		utils.SendDbErr(c, err.Error())
		return
	}

	order := models.Order{
		Id:          res.Id,
		UserId:      res.UserId,
		ProductId:   res.ProductId,
		Quantity:    res.Quantity,
		TotalPrice:  res.TotalPrice,
		CreatedAt:   res.CreatedAt,
		ProductName: res.ProductName,
		UserName:    res.Username,
	}

	c.JSON(http.StatusOK, order)
}

// PlaceOrder Post /orders
func (api *OrdersAPI) PlaceOrder(c *gin.Context) {
	var orderReq models.CreateOrderRequest
	if err := c.ShouldBindJSON(&orderReq); err != nil {
		utils.SendBadRequestErr(c, "Invalid request body")
		return
	}

	// Validate quantity
	if orderReq.Quantity < 1 || orderReq.Quantity > 3 {
		utils.SendBadRequestErr(c, "Quantity must be between 1 and 3")
		return
	}

	// Get user ID from token
	userID, exists := c.Get("token_user_id")
	if !exists {
		utils.SendUnauthorizedErr(c)
		return
	}

	req := &dbpb.CreateOrderRequest{
		UserId:    int32(userID.(int)),
		ProductId: int32(orderReq.ProductId),
		Quantity:  int32(orderReq.Quantity),
	}
	res, err := dbclient.GetDbClient().CreateOrder(c.Request.Context(), req)

	if err != nil {
		utils.SendDbErr(c, err.Error())
		return
	}

	c.JSON(http.StatusCreated, gin.H{"message": res.Message})
}

// GetUserOrdersById Get /orders/user/:id
func (api *OrdersAPI) GetUserOrdersById(c *gin.Context) {
	userID, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		utils.SendBadRequestErr(c, "Invalid user ID")
		return
	}

	// 验证用户认证
	_, exists := c.Get("token_user_id")
	if !exists {
		utils.SendUnauthorizedErr(c)
		return
	}

	req := &dbpb.GetUserRequest{
		UserId: int32(userID),
	}

	res, err := dbclient.GetDbClient().GetUserOrders(c.Request.Context(), req)
	if err != nil {
		utils.SendDbErr(c, err.Error())
		return
	}

	orders := make([]models.Order, 0)
	for _, o := range res.Orders {
		order := models.Order{
			Id:          o.Id,
			UserId:      o.UserId,
			ProductId:   o.ProductId,
			Quantity:    o.Quantity,
			TotalPrice:  o.TotalPrice,
			CreatedAt:   o.CreatedAt,
			ProductName: o.ProductName,
			UserName:    o.Username,
		}
		orders = append(orders, order)
	}

	c.JSON(http.StatusOK, orders)
}
