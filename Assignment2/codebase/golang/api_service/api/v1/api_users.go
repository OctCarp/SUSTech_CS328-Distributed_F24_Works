/*
 * SUSTech Store API
 *
 * API service for SUSTech Store
 *
 * API version: 0.1.0
 * Contact: 12110304@mail.sustech.edu.cn
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1

import (
	"github.com/gin-gonic/gin"
	"net/http"
	"octcarp/sustech/cs328/a2/api/grpc/dbclient"
	"octcarp/sustech/cs328/a2/api/models"
	"octcarp/sustech/cs328/a2/api/utils"
	dbpb "octcarp/sustech/cs328/a2/gogrpc/dbs/pb"
	"strconv"
)

type UsersAPI struct {
}

// DeactivateUser Delete /users/:id
func (api *UsersAPI) DeactivateUser(c *gin.Context) {
	userID, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		utils.SendBadRequestErr(c, "Invalid user ID")
		return
	}

	tokenId, exists := c.Get("token_user_id")
	if !(exists && userID == tokenId) {
		// token_user_id != request related user_id
		utils.SendUnauthorizedErr(c)
		return
	}

	req := &dbpb.DeactivateUserRequest{
		UserId: int32(userID),
	}
	res, err := dbclient.GetDbClient().DeactivateUser(c.Request.Context(), req)

	if err != nil {
		utils.HandleDbErr(c, err)
		return
	}

	utils.SendCodeWithMessage(c, int(res.StatusCode), res.Message)
}

// GetUser Get /users/:id
func (api *UsersAPI) GetUser(c *gin.Context) {
	userID, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		utils.SendBadRequestErr(c, "Invalid user ID")
		return
	}

	tokenId, exists := c.Get("token_user_id")
	if !(exists && userID == tokenId) {
		utils.SendUnauthorizedErr(c)
		return
	}

	req := &dbpb.GetUserRequest{
		UserId: int32(userID),
	}
	res, err := dbclient.GetDbClient().GetUser(c.Request.Context(), req)

	if err != nil {
		utils.HandleDbErr(c, err)
		return
	}

	user := models.User{
		Id:        res.Id,
		Sid:       res.Sid,
		Username:  res.Username,
		Email:     res.Email,
		CreatedAt: res.CreatedAt,
	}

	utils.ResponseLog(c, http.StatusOK, "User retrieved successfully")
	c.JSON(http.StatusOK, user)
}

// LoginUser Post /users/login
func (api *UsersAPI) LoginUser(c *gin.Context) {
	var loginReq models.LoginRequest
	if err := c.ShouldBindJSON(&loginReq); err != nil {
		utils.SendBadRequestErr(c, "Invalid request body")
		return
	}

	req := &dbpb.GetUserByUsernameRequest{
		Username: loginReq.Username,
	}
	user, err := dbclient.GetDbClient().GetUserByUsername(c.Request.Context(), req)

	if err != nil {
		utils.HandleDbErr(c, err)
		return
	}

	if user == nil {
		utils.SendNotFoundErr(c)
		return
	}

	// password verification
	if !utils.CheckPassword(loginReq.Password, user.PasswordHash) {
		utils.SendUnauthorizedErr(c)
		return
	}

	// use User Id to generate token
	token, err := utils.GenerateToken(user.Id)
	if err != nil {
		utils.SendInternalErr(c, "Failed to generate token")
		return
	}

	utils.ResponseLog(c, http.StatusOK, "Login successful")
	c.JSON(http.StatusOK, gin.H{
		"token": token,
	})
}

// RegisterUser Post /users/register
func (api *UsersAPI) RegisterUser(c *gin.Context) {
	var registerReq models.RegisterUserRequest

	if err := c.ShouldBindJSON(&registerReq); err != nil {
		utils.SendBadRequestErr(c, "Invalid request body")
		return
	}

	hashedPassword, err := utils.HashPassword(registerReq.Password)
	if err != nil {
		utils.SendInternalErr(c, "Failed to hash password")
		return
	}

	req := &dbpb.CreateUserRequest{
		Sid:          registerReq.Sid,
		Username:     registerReq.Username,
		Email:        registerReq.Email,
		PasswordHash: hashedPassword,
	}

	res, err := dbclient.GetDbClient().CreateUser(c.Request.Context(), req)
	if err != nil {
		utils.HandleDbErr(c, err)
		return
	}

	utils.SendCodeWithMessage(c, int(res.StatusCode), res.Message)
}

// UpdateUser Put /users/:id
func (api *UsersAPI) UpdateUser(c *gin.Context) {
	userID, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		utils.SendBadRequestErr(c, "Invalid user ID")
		return
	}

	tokenId, exists := c.Get("token_user_id")
	if !(exists && userID == tokenId) {
		utils.SendUnauthorizedErr(c)
		return
	}

	var updateReq models.UpdateUserRequest

	if err := c.ShouldBindJSON(&updateReq); err != nil {
		utils.SendBadRequestErr(c, "Invalid request body")
		return
	}

	req := &dbpb.UpdateUserRequest{
		UserId: int32(userID),
		Email:  updateReq.Email,
	}

	res, err := dbclient.GetDbClient().UpdateUser(c.Request.Context(), req)
	if err != nil {
		utils.HandleDbErr(c, err)
		return
	}

	utils.ResponseLog(c, http.StatusOK, "Update user successfully")
	c.JSON(http.StatusOK, res)
}
